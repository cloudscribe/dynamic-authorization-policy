@model cloudscribe.DynamicPolicy.Web.Mvc.ViewModels.PolicyEditViewModel
@using Microsoft.Extensions.Options
@inject IRoleSelectorProperties roleSelector
@inject IStringLocalizer<PolicyResources> sr
@inject IOptions<cloudscribe.DynamicPolicy.Models.PolicyManagementOptions> optionsAccesor
@{
    var titleFormat = sr["Edit Policy - {0}"];
    ViewData["Title"] = string.Format(titleFormat, Model.Name);
    var prompt = string.Format(sr["Are you sure you want to delete the policy {0}? You cannot undo this action. If the policy name is in use then it will be recreated automatically if automatic policy creation is enabled."], String.Join("", Model.Name.Where(c => char.IsPunctuation(c) == false)));
    var options = optionsAccesor.Value;
    var hasAnyRequirements = Model.RequireAuthenticatedUser || Model.RequiredClaims.Any() || !string.IsNullOrWhiteSpace(Model.RequiredUserName) || !string.IsNullOrWhiteSpace(Model.AllowedRolesCsv);

}

<h2>@ViewData["Title"]</h2>
@if (!hasAnyRequirements)
{
    <p class="alert alert-warning">
        @sr["This policy has no requirements therefore it allows anonymous access. If this is not intended please add one or more requirements."]
    </p>
}
<div class="row">
    <div class="col-md-12">
        <form asp-controller="PolicyManagement" asp-action="EditPolicy">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input asp-for="Id" type="hidden" />
            @if (options.ShowRequireAuthenticatedUserOption)
            {
                <div class="form-group">
                    <div class="checkbox">
                        <label>
                            <input asp-for="RequireAuthenticatedUser" /> @sr["Require Authenticated User"]
                        </label>
                    </div>
                </div>
            }
            else
            {
                <input name="RequireAuthenticatedUser" value="false" type="hidden" />
            }
            <div class="form-group">
                <p>@sr["Note that roles use OR logic, a user only has to be in any one of the allowed roles to meet the policy requirement."]</p>
                <label asp-for="AllowedRolesCsv" class="control-label">@sr["Allowed Roles (comma separated values)"]</label>
                <input asp-for="AllowedRolesCsv" class="form-control" />
                <a class="btn btn-default" style="margin-top:3px;"
                   cdp-role-selector="@roleSelector"
                   cdp-tenant-id="@Model.TenantId"
                   cdp-target-id="AllowedRolesCsv">Select Roles</a>
                <span asp-validation-for="AllowedRolesCsv" class="text-danger"></span>
            </div>
            @if (options.ShowAuthenticationSchemeOptions)
            {
                <div class="form-group">
                    <label asp-for="AuthenticationSchemesCsv" class="control-label">@sr["Authentication Schemes (comma separated values, leave blank for all)"]</label>
                    <input asp-for="AuthenticationSchemesCsv" class="form-control" />
                    <span asp-validation-for="AuthenticationSchemesCsv" class="text-danger"></span>
                </div>
            }
            else
            {
                <input name="AuthenticationSchemesCsv" value="" type="hidden" />
            }
            @if (options.ShowRequiredUserNameOption)
            {
                <div class="form-group">
                    <label asp-for="RequiredUserName" class="control-label">@sr["Required User Name"]</label>
                    <input asp-for="RequiredUserName" class="form-control" />
                    <span asp-validation-for="RequiredUserName" class="text-danger"></span>
                </div>
            }
            else
            {
                <input name="RequiredUserName" value="" type="hidden" />
            }

            <div class="form-group">
                <button type="submit" class="btn btn-default">@sr["Save"]</button>
                <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#confirmDeleteModal">
                    @sr["Delete"]
                </button>
            </div>
        </form>
    </div>
</div>
@if (options.ShowClaimRequirementOptions)
{
    <h4>Required Claims</h4>
    <p>@sr["Note that claims use AND logic, if you require claims, the user must have all the required claims to meet the policy requirement."]</p>
    if (Model.RequiredClaims.Count > 0)
    {
        @foreach (var cm in Model.RequiredClaims)
        {
            await Html.RenderPartialAsync("EditClaimRequirement", cm);
            <hr />

        }
    }
    await Html.RenderPartialAsync("NewClaimRequirement", new ClaimRequirementViewModel(Model.Id));
}


<form id="deletePolicyForm" class="form-inline" asp-controller="PolicyManagement" asp-action="DeletePolicy">
    <a class="btn btn-default" asp-action="Index">@sr["Back to List"]</a>
    <input asp-for="Id" type="hidden" />
    <div class="modal fade" id="confirmDeleteModal" tabindex="-1" role="dialog" aria-labelledby="confirmDeleteHeading">
        <div class="modal-dialog modal-sm" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label='@sr["Close"]'><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="confirmDeleteHeading">@sr["Confirm Delete"]</h4>
                </div>
                <div class="modal-body">
                    @prompt
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">@sr["Cancel"]</button>
                    <input type="submit" value='@sr["Delete"]' class="btn btn-danger btn-ok" />
                </div>
            </div>
        </div>
    </div>

</form>



@section Scripts {

    @{ await Html.RenderPartialAsync("_UnobtrusiveValidationScriptsPartial"); }
    @if (roleSelector.RequiredScriptPaths != null)
    {
        foreach (var s in roleSelector.RequiredScriptPaths)
        {
            <script src="@Url.Content(s)"></script>
        }
    }
}